/*
 * ---------------------------------------------------------------------------
 *  Default parameters for the eQTL Catalogue genotype QC pipeline.
 * ---------------------------------------------------------------------------
 */

params {
  // Reference 1000Genome dataset VCF
  ref_genome = "/gpfs/hpc/home/kerimov/1000G_genome/source_data/GRCh38_renamed_ids_no_multiallelic.vcf.gz"
  
  // file with populations of reference VCF
  populations_file = "/gpfs/hpc/home/kerimov/1000G_genome/source_data/igsr_samples.tsv"

  // file with samples (americans) to remove (from reference VCF) for pca mapping
  ids_to_remove_file = "/gpfs/hpc/home/kerimov/1000G_genome/source_data/amrs.txt"

  // Number of PCs
  num_pc = 3

  // flag if remove samples before mapping
  exclude_population = false
}

process{
  container = params.container

  cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  maxRetries = 3
  maxErrors = '-1'

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }

  // Process-specific resource requirements
  withName:refVCFtoBED {
    cpus = { check_max( 16, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:remove_family {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:remove_dubl {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:sampleVCftoBED {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:calculate_relatedness_matrix {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  // withName:get_SNPs_list_from_main_dataset {
  //   cpus = { check_max( 2, 'cpus' ) }
  //   memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  //   time = { check_max( 5.h * task.attempt, 'time' ) }
  // }
  // withName:extract_SNPs_and_make_bed {
  //   cpus = { check_max( 2, 'cpus' ) }
  //   memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  //   time = { check_max( 5.h * task.attempt, 'time' ) }
  // }
  // withName:extract_overlapped_SNPs_from_main_dataset {
  //   cpus = { check_max( 2, 'cpus' ) }
  //   memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  //   time = { check_max( 5.h * task.attempt, 'time' ) }
  // }
  // withName:calc_kins_matrices {
  //   cpus = { check_max( 2, 'cpus' ) }
  //   memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  //   time = { check_max( 5.h * task.attempt, 'time' ) }
  // }
  // withName:calc_pca_and_loads {
  //   cpus = { check_max( 4, 'cpus' ) }
  //   memory = { check_max( 64.GB * task.attempt, 'memory' ) }
  //   time = { check_max( 5.h * task.attempt, 'time' ) }
  // }
  // withName:map_new_dataset {
  //   cpus = { check_max( 4, 'cpus' ) }
  //   memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  //   time = { check_max( 5.h * task.attempt, 'time' ) }
  // }
  // withName:plot_pca {
  //   cpus = { check_max( 2, 'cpus' ) }
  //   memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  //   time = { check_max( 5.h * task.attempt, 'time' ) }
  // }
}
